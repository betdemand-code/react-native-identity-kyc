buildscript {
    repositories {
        google()
        // Add any other repositories needed for your buildscript dependencies
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:7.0.2'
        // Add other dependencies needed for your buildscript
    }
}

plugins {
    id 'com.android.library'
    id 'maven-publish' // Updated plugin ID
}

def safeExtGet(prop, fallback) {
    rootProject.ext.has(prop) ? rootProject.ext.get(prop) : fallback
}

android {
    compileSdkVersion = safeExtGet('compileSdkVersion', DEFAULT_COMPILE_SDK_VERSION)
    buildToolsVersion = safeExtGet('buildToolsVersion', DEFAULT_BUILD_TOOLS_VERSION)
    defaultConfig {
        minSdkVersion safeExtGet('minSdkVersion', DEFAULT_MIN_SDK_VERSION)
        targetSdkVersion safeExtGet('targetSdkVersion', DEFAULT_TARGET_SDK_VERSION)
        versionCode = 1
        versionName = "1.0"
    }
    lintOptions {
        abortOnError false
    }
}

repositories {
    // ref: https://www.baeldung.com/maven-local-repository
    mavenLocal()
    maven {
        // All of React Native (JS, Obj-C sources, Android binaries) is installed from npm
        url "$rootDir/../node_modules/react-native/android"
    }
    maven {
        // Android JSC is installed from npm
        url "$rootDir/../node_modules/jsc-android/dist"
    }
    google()
}

dependencies {
    //noinspection GradleDynamicVersion
    implementation 'com.facebook.react:react-native:+'
}

def configureReactNativePom(def pom) {
    def packageJson = new groovy.json.JsonSlurper().parseText(file('../package.json').text)

    pom.project {
        name packageJson.title
        artifactId packageJson.name
        version = packageJson.version
        group = "com.reactlibrary"
        description packageJson.description
        url packageJson.repository.baseUrl

        licenses {
            license {
                name packageJson.license
                url packageJson.repository.baseUrl + '/blob/master/' + packageJson.licenseFilename
                distribution 'repo'
            }
        }

        developers {
            developer {
                id packageJson.author.username
                name packageJson.author.name
            }
        }
    }
}

tasks.register('androidJavadoc', Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += files(android.bootClasspath)
    classpath += files(configurations.getByName('implementation').asFileTree)
    include '**/*.java'
}

tasks.register('androidJavadocJar', Jar) {
    dependsOn 'androidJavadoc'
    classifier = 'javadoc'
    from tasks.named('androidJavadoc').get().destinationDir
}

tasks.register('androidSourcesJar', Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.srcDirs
    include '**/*.java'
}

android.libraryVariants.all { variant ->
    def name = variant.name.capitalize()
    def javaCompileTask = variant.javaCompileProvider.get()

    tasks.register("jar${name}", Jar) {
        dependsOn javaCompileTask
        from javaCompileTask.destinationDir
    }
}

